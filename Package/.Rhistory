}
# Return states
return(x)
}
rigati.states()
K
rigati.states <- function(  N  = 100,
x0 = c(1,1),
D  = diag(2),
R  = diag(2) * c( 1, 2 ) ,
A  = matrix( sample(6,4,replace=TRUE), 2, 2),
B  = matrix( sample(6,4,replace=TRUE), 2, 2),
C  = c( 1, 1 ) )
{
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize matrices
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K <- list()
K[[N]]  <- Q
# Compute K and L matrices
for ( k in (N-1):1 ){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
print( K[[k]] - K[[(k+1)]] )
if( K[[k]] - K[[(k+1)]] == 10**(-6) ){
K <- K[[k]]
print(K)
break
}
}
L <- - solve( t(B) %*% K  %*% B + R) %*% t(B) %*% K %*% A
set.seed(1)
# Compute states
for( k in 2:N ){
u.temp <- L %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + t(w)
}
# Return states
return(x)
}
rigati.states()
rigati.states <- function(  N  = 100,
x0 = c(1,1),
D  = diag(2),
R  = diag(2) * c( 1, 2 ) ,
A  = matrix( sample(6,4,replace=TRUE), 2, 2),
B  = matrix( sample(6,4,replace=TRUE), 2, 2),
C  = c( 1, 1 ) )
{
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize matrices
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K <- list()
K[[N]]  <- Q
# Compute K and L matrices
for ( k in (N-1):1 ){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
if( K[[k]] - K[[(k+1)]] == 10**(-6) ){
K <- K[[k]]
print(K)
break
}
}
L <- - solve( t(B) %*% K  %*% B + R) %*% t(B) %*% K %*% A
set.seed(1)
# Compute states
for( k in 2:N ){
u.temp <- L %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + t(w)
}
# Return states
return(x)
}
rigati.states()
rigati.states <- function(  N  = 100,
x0 = c(1,1),
D  = diag(2),
R  = diag(2) * c( 1, 2 ) ,
A  = matrix( sample(6,4,replace=TRUE), 2, 2),
B  = matrix( sample(6,4,replace=TRUE), 2, 2),
C  = c( 1, 1 ) )
{
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize matrices
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K <- list()
K[[N]]  <- Q
# Compute K and L matrices
for ( k in (N-1):1 ){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
if( ( K[[k]] - K[[(k+1)]] ) == 10**(-6) ){
K <- K[[k]]
print(K)
break
}
}
L <- - solve( t(B) %*% K  %*% B + R) %*% t(B) %*% K %*% A
set.seed(1)
# Compute states
for( k in 2:N ){
u.temp <- L %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + t(w)
}
# Return states
return(x)
}
rigati.states()
rigati.states <- function(  N  = 100,
x0 = c(1,1),
D  = diag(2),
R  = diag(2) * c( 1, 2 ) ,
A  = matrix( sample(6,4,replace=TRUE), 2, 2),
B  = matrix( sample(6,4,replace=TRUE), 2, 2),
C  = c( 1, 1 ) )
{
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize matrices
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K <- list()
K[[N]]  <- Q
# Compute K and L matrices
for ( k in (N-1):1 ){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
if( sum( ( K[[k]] - K[[(k+1)]] ) ) == 10**(-6) ){
K <- K[[k]]
print(K)
break
}
}
L <- - solve( t(B) %*% K  %*% B + R) %*% t(B) %*% K %*% A
set.seed(1)
# Compute states
for( k in 2:N ){
u.temp <- L %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + t(w)
}
# Return states
return(x)
}
rigati.states()
rigati.states <- function(  N  = 100,
x0 = c(1,1),
D  = diag(2),
R  = diag(2) * c( 1, 2 ) ,
A  = matrix( sample(6,4,replace=TRUE), 2, 2),
B  = matrix( sample(6,4,replace=TRUE), 2, 2),
C  = c( 1, 1 ) )
{
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize matrices
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K <- list()
K[[N]]  <- Q
# Compute K and L matrices
for ( k in (N-1):1 ){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
if( sum( ( K[[k]] - K[[(k+1)]] ) ) < 10**(-6) ){
K <- K[[k]]
print(K)
break
}
}
L <- - solve( t(B) %*% K  %*% B + R) %*% t(B) %*% K %*% A
set.seed(1)
# Compute states
for( k in 2:N ){
u.temp <- L %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + t(w)
}
# Return states
return(x)
}
rigati.states()
rigati.states <- function(  N  = 100,
x0 = c(1,1),
D  = diag(2),
R  = diag(2) * c( 1, 2 ) ,
A  = matrix( sample(6,4,replace=TRUE), 2, 2),
B  = matrix( sample(6,4,replace=TRUE), 2, 2),
C  = c( 1, 1 ) )
{
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize matrices
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K <- list()
K[[N]]  <- Q
# Compute K and L matrices
for ( k in (N-1):1 ){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
if( sum( ( K[[k]] - K[[(k+1)]] ) ) < 10**(-6) ){
K <- K[[(k+1)]]
print(K)
break
}
}
L <- - solve( t(B) %*% K  %*% B + R) %*% t(B) %*% K %*% A
set.seed(1)
# Compute states
for( k in 2:N ){
u.temp <- L %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + t(w)
}
# Return states
return(x)
}
rigati.states()
mu      <- c( 0 , 0 )
D
D  = diag(2) * c(0.5,0.2)
w      <- rmvnorm( 100 , mean = mu , sigma = D )
if (!require("mvtnorm")) install.packages("mvtnorm"); library(mvtnorm)
w      <- rmvnorm( 100 , mean = mu , sigma = D )
w
w[[1]]
w[1,]
t(w[1,])
compute.states <- function(  N  = 100,
x0 = c(3,2),
D  = diag(2) * c(0.5,0.2),
R  = diag(2) * c( 2, 1 ) ,
A  = matrix( c(0,3,0,0), 2, 2),
B  = matrix( c(4,2,0,1), 2, 2),
C  = c( 5, 0 ) )
{
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize storage objets and set corresponding starting conditions
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K       <- list()
K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + t(AM(w[(k-1),]))
}
compute.states <- function(  N  = 100,
x0 = c(3,2),
D  = diag(2) * c(0.5,0.2),
R  = diag(2) * c( 2, 1 ) ,
A  = matrix( c(0,3,0,0), 2, 2),
B  = matrix( c(4,2,0,1), 2, 2),
C  = c( 5, 0 ) )
{
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize storage objets and set corresponding starting conditions
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K       <- list()
K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + t(AM(w[(k-1),]))
}
}
compute.states <- function(  N  = 100,
x0 = c(3,2),
D  = diag(2) * c(0.5,0.2),
R  = diag(2) * c( 2, 1 ) ,
A  = matrix( c(0,3,0,0), 2, 2),
B  = matrix( c(4,2,0,1), 2, 2),
C  = c( 5, 0 ) )
{
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize storage objets and set corresponding starting conditions
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K       <- list()
K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + t(AM(w[(k-1),]))
}
}
}
compute.states <- function(  N  = 100,
x0 = c(3,2),
D  = diag(2) * c(0.5,0.2),
R  = diag(2) * c( 2, 1 ) ,
A  = matrix( c(0,3,0,0), 2, 2),
B  = matrix( c(4,2,0,1), 2, 2),
C  = c( 5, 0 ) )
{
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize storage objets and set corresponding starting conditions
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K       <- list()
K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + t(AM(w[(k-1),]))
}
}
compute.states
compute.states()
compute.states <- function(  N  = 100,
x0 = c(3,2),
D  = diag(2) * c(0.5,0.2),
R  = diag(2) * c( 2, 1 ) ,
A  = matrix( c(0,3,0,0), 2, 2),
B  = matrix( c(4,2,0,1), 2, 2),
C  = c( 5, 0 ) )
{
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize storage objets and set corresponding starting conditions
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K       <- list()
K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
}
compute.states()
N  = 100
x0 = c(3,2)
D  = diag(2) * c(0.5,0.2)
R  = diag(2) * c( 2, 1 )
A  = matrix( c(0,3,0,0), 2, 2)
B  = matrix( c(4,2,0,1), 2, 2)
C  = c( 5, 0 )
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize storage objets and set corresponding starting conditions
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K       <- list()
K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
w
w      <- rmvnorm( 100 , mean = mu , sigma = D )
w
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
N  = 100
x0 = c(3,2)
D  = diag(2) * c(0.5,0.2)
R  = diag(2) * c( 2, 1 )
A  = matrix( c(0,3,0,0), 2, 2)
B  = matrix( c(4,2,0,1), 2, 2)
C  = c( 5, 0 )
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize storage objets and set corresponding starting conditions
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K       <- list()
K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
}
compute.states()
N  = 100
x0 = c(3,2)
D  = diag(2) * c(0.5,0.2)
R  = diag(2) * c( 2, 1 )
A  = matrix( c(0,3,0,0), 2, 2)
B  = matrix( c(4,2,0,1), 2, 2)
C  = c( 5, 0 )
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize storage objets and set corresponding starting conditions
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K       <- list()
K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
}
compute.states()
w      <- rmvnorm( 100 , mean = mu , sigma = D )
w
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
x
matrix( c(0,3,0,0), 2, 2)
matrix( c(4,2,0,1), 2, 2)
install.packages("TMVA")
setwd('/Users/felix/Documents/test/Riding-free-on-KAGGLE/Package/pravetz/')
devtools::install('pravetz')
setwd('/Users/felix/Documents/test/Riding-free-on-KAGGLE/Package/')
devtools::install('pravetz')
library(pravetz)
n <- 1000
m <- 61
# Compute Create random feature matrix and response vector
features <- matrix( rnorm( n*m , 0, 10 ), nrow = n, ncol = m )
response <- sample(5 , n, replace = T)
# Create data set and rename columns
toy <- data.frame(features , response)
colnames(toy) <- c(sapply(1:m,function(x) paste0("variable",x)),"popularity")
# Compute Create random test matrix
test <- data.frame( matrix( rnorm( n*m , 0, 10 ), nrow = n, ncol = m ) )
colnames(test) <- sapply(1:m,function(x) paste0("variable",x))
predictEnsemble( data = toy, y = 'popularity', test = test,
rounds = 2, threads = 2, ram ='4g' )
